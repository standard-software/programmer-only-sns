{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["parts","string","subFirst","isFirst","dateFormat","dateText","dateToString","stringToDate","getFetchData","url","a","fetch","then","response","json","data","result","complementUserId","shortId","userArray","index","findIndex","user","id","complementTextId","commentArray","comment","commentId","App","useState","setCommentArray","setUserArray","inputText","setInputText","inputUserName","setInputUserName","inputUserDescription","setInputUserDescription","inputReplyUserId","setInputReplyUserId","inputReplyTextId","setInputReplyTextId","getCommentArray","_userArray","userData","item","push","_blockUserIds","localStorage","getItem","textAllURL","isNull","split","map","v","join","_commentArray","commentData","userName","find","_user_id","name","replyToUserName","isUndefined","in_reply_to_user_id","replyToTextId","in_reply_to_text_id","userId","createdAt","_created_at","updatedAt","_updated_at","text","reverse","postText","replyUserId","replyTextId","postData","method","mode","cache","credentials","headers","Authorization","redirect","referrerPolicy","body","JSON","stringify","postUserName","description","reloadComment","useEffect","myUserItem","initialValue","className","i","type","value","onChange","e","target","placeholder","onClick","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.707b081f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport parts, {\n  isUndefined, isNull, stringToDate, dateToString,\n  initialValue,\n} from \"@standard-software/parts\"\nconst { subFirst, isFirst } = parts.string;\n\nconst dateFormat = (dateText) => {\n  return dateToString(\n    stringToDate(dateText, 'YYYY-MM-DDTHH:mm:ss.SSSZ'),\n    'MM/DD HH:mm:ss'\n  )\n}\n\nconst getFetchData = async (url) => {\n  let result;\n  await fetch(url)\n  .then((response) => response.json())\n  .then((data) => {\n    result = data\n  })\n  return result;\n}\n\nconst complementUserId = (shortId, userArray) => {\n  // console.log('complementUserId', { userArray, shortId });\n  const index = userArray.findIndex(user => isFirst(user.id, shortId))\n  // console.log({ userArray, shortId, index });\n  if (index === -1) {\n    return ''\n  } else {\n    return userArray[index].id\n  }\n}\n\nconst complementTextId = (shortId, commentArray) => {\n  // console.log('complementTextId', { commentArray, shortId });\n  const index = commentArray.findIndex(comment => isFirst(comment.commentId, shortId))\n  // console.log({ commentArray, shortId, index });\n  if (index === -1) {\n    return ''\n  } else {\n    return commentArray[index].commentId\n  }\n}\n\nconst App = () => {\n\n  const [commentArray, setCommentArray] = useState([]);\n  const [userArray, setUserArray] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [inputUserName, setInputUserName] = useState('');\n  const [inputUserDescription, setInputUserDescription] = useState('');\n  const [inputReplyUserId, setInputReplyUserId] = useState('');\n  const [inputReplyTextId, setInputReplyTextId] = useState('');\n\n  // console.log(\"App\");\n\n  const getCommentArray = async () => {\n    const _userArray = [];\n    const userData = await getFetchData('https://versatileapi.herokuapp.com/api/user/all/');\n    for (const item of userData) {\n      _userArray.push({...item});\n    }\n    // console.log({ _userArray });\n    setUserArray(_userArray);\n\n    const _blockUserIds = localStorage.getItem('posns_block_user_ids');\n\n    const textAllURL =\n      'https://versatileapi.herokuapp.com/api/text/all/?$orderby=_created_at desc&$limit=5000' +\n      (\n        isNull(_blockUserIds) ? ''\n        : `&$filter=_user_id ne ` +\n          _blockUserIds.split(',')\n          .map(v=>`'${complementUserId(v, _userArray)}'`)\n          .join(' and _user_id ne ')\n      )\n\n    const _commentArray = [];\n    const commentData = await getFetchData(textAllURL)\n    for (const item of commentData) {\n      _commentArray.push({\n        userName:\n          _userArray.find((user) => {\n            return user.id === item._user_id;\n          })?.name ?? \"\",\n        replyToUserName:\n          isUndefined(item.in_reply_to_user_id) ? '' :\n          _userArray.find((user) => {\n            return user.id === item.in_reply_to_user_id;\n          })?.name ?? \"-\",\n        replyToTextId:\n          isUndefined(item.in_reply_to_text_id) ? '' :\n          subFirst(item.in_reply_to_text_id, 8),\n        item: item,\n        userId: item._user_id,\n        createdAt: dateFormat(item._created_at),\n        updatedAt: dateFormat(item._updated_at),\n        commentId: item.id,\n        text: item.text,\n      });\n    }\n\n    // console.log({ _commentArray });\n    _commentArray.reverse();\n    return _commentArray;\n  }\n\n  const postText = async (text, replyUserId, replyTextId) => {\n    const postData = {\n      text\n    }\n    if (replyUserId !== '') {\n      postData.in_reply_to_user_id = replyUserId\n    }\n    if (replyTextId !== '') {\n      postData.in_reply_to_text_id = replyTextId\n    }\n    // console.log({postData})\n    const response = await fetch('https://versatileapi.herokuapp.com/api/text', {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"HelloWorld\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(postData)\n    });\n    return response.json();\n  }\n\n  const postUserName = async (name, description) => {\n    const response = await fetch('https://versatileapi.herokuapp.com/api/user/create_user', {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"HelloWorld\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({ name, description })\n    });\n\n    return response.json();\n  }\n\n  const reloadComment = () => {\n    (async () => {\n      setCommentArray(await getCommentArray());\n    })();\n  }\n\n  // ページロード時のデータ読み込み処理\n  useEffect(() => {\n    (async () => {\n      setCommentArray(await getCommentArray());\n\n      const myUserItem = {\n        name: initialValue(localStorage.getItem('posns_username'), '', [null]),\n        description: initialValue(localStorage.getItem('posns_userdesc'), '', [null]),\n      }\n      // console.log({myUserItem})\n      setInputUserName(myUserItem.name);\n      setInputUserDescription(myUserItem.description)\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      <div>\n        {commentArray.map((comment, i) => {\n          // console.log(comment.userName);\n          return (\n            <div key={comment.commentId}>\n              {comment.createdAt === comment.updatedAt\n                ? `${comment.createdAt}`\n                : `${comment.createdAt}|${comment.updatedAt}`}\n              {`[${subFirst(comment.commentId, 8)}]`}\n              <br />\n              {`${comment.userName} [${subFirst(comment.userId, 10)}] `}\n              <br />\n              {\n                comment.replyToUserName === '' && comment.replyToTextId === '' ? null\n                : comment.replyToTextId === '' ? <>{`TO:${comment.replyToUserName}`}<br /></>\n                : comment.replyToUserName === '' ? <>{`REPLY:${comment.replyToTextId}`}<br /></>\n                : <>{`TO:${comment.replyToUserName} REPLY:${comment.replyToTextId}`}<br /></>\n              }\n              {comment.text.split(/(\\n)/).map(v => v === '\\n' ? <br /> : v)}\n              <hr />\n            </div>\n          );\n        })}\n\n        <div>\n          <input type=\"text\" value={inputUserName}\n            onChange={(e) => {\n              setInputUserName(e.target.value);\n            }}\n            placeholder='ユーザー名'\n          />\n          <input type=\"text\" value={inputUserDescription}\n            onChange={(e) => {\n              setInputUserDescription(e.target.value);\n            }}\n            placeholder='自己紹介文'\n          />\n          <button onClick={async () => {\n            await postUserName(inputUserName, inputUserDescription);\n            localStorage.setItem('posns_username', inputUserName);\n            localStorage.setItem('posns_userdesc', inputUserDescription);\n            reloadComment()\n          }}>ユーザー名設定</button>\n          <br />\n          <input type=\"text\" value={inputReplyUserId}\n            onChange={(e) => {\n              setInputReplyUserId(e.target.value);\n            }}\n            placeholder='返信ユーザーID'\n          />\n          <input type=\"text\" value={inputReplyTextId}\n            onChange={(e) => {\n              setInputReplyTextId(e.target.value);\n            }}\n            placeholder='返信テキストID'\n          />\n          <br />\n          <textarea value={inputText}\n            onChange={(e) => {\n              setInputText(e.target.value);\n            }}\n            placeholder='投稿内容'\n          />\n          <button onClick={async () => {\n            if (inputText !== '') {\n              const postTextResult = await postText(\n                inputText,\n                complementUserId(inputReplyUserId, userArray),\n                complementTextId(inputReplyTextId, commentArray)\n              );\n              // console.log({postTextResult})\n              setInputText('');\n              setInputReplyUserId('');\n              setInputReplyTextId('');\n              // console.log('postText', inputText)\n            }\n            // console.log('onClick before reloadComment', inputText)\n            reloadComment()\n          }}>書き込み/表示更新</button>\n          <br />\n        </div>\n\n        <br />\n\n      </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}