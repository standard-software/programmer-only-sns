{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["parts","string","subFirst","isFirst","dateFormat","dateText","dateToString","stringToDate","getFetchData","url","a","fetch","then","response","json","data","result","complementUserId","shortId","userArray","index","findIndex","user","id","complementTextId","commentArray","comment","commentId","App","useState","setCommentArray","setUserArray","inputText","setInputText","inputUserName","setInputUserName","inputUserDescription","setInputUserDescription","inputReplyUserId","setInputReplyUserId","inputReplyTextId","setInputReplyTextId","getCommentArray","userData","_blockUserIds","localStorage","getItem","textAllURL","isNull","split","map","v","join","likeData","_commentArray","commentData","item","likeCount","sum","filter","like","like_count","push","userName","find","_user_id","name","replyToUserName","isUndefined","in_reply_to_user_id","replyToTextId","in_reply_to_text_id","_replyToTextId","userId","createdAt","_created_at","updatedAt","_updated_at","text","childComment","reverse","postText","replyUserId","replyTextId","postData","method","mode","cache","credentials","headers","Authorization","redirect","referrerPolicy","body","JSON","stringify","postUserName","description","reloadComment","useEffect","myUserItem","initialValue","commentOutput","i","viewCommentArray","c","setChildComment","targetCommentArray","level","length","className","outputChildComment","style","marginLeft","type","value","onChange","e","target","placeholder","onClick","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc9316bb.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport parts, {\n  isUndefined, isNull, stringToDate, dateToString,\n  initialValue, sum,\n} from \"@standard-software/parts\"\nconst { subFirst, isFirst } = parts.string;\n\nconst dateFormat = (dateText) => {\n  return dateToString(\n    stringToDate(dateText, 'YYYY-MM-DDTHH:mm:ss.SSSZ'),\n    'MM/DD HH:mm:ss'\n  )\n}\n\nconst getFetchData = async (url) => {\n  let result;\n  await fetch(url)\n  .then((response) => response.json())\n  .then((data) => {\n    result = data\n  })\n  return result;\n}\n\nconst complementUserId = (shortId, userArray) => {\n  // console.log('complementUserId', { userArray, shortId });\n  const index = userArray.findIndex(user => isFirst(user.id, shortId))\n  // console.log({ userArray, shortId, index });\n  if (index === -1) {\n    return ''\n  } else {\n    return userArray[index].id\n  }\n}\n\nconst complementTextId = (shortId, commentArray) => {\n  // console.log('complementTextId', { commentArray, shortId });\n  const index = commentArray.findIndex(comment => isFirst(comment.commentId, shortId))\n  // console.log({ commentArray, shortId, index });\n  if (index === -1) {\n    return ''\n  } else {\n    return commentArray[index].commentId\n  }\n}\n\nconst App = () => {\n\n  const [commentArray, setCommentArray] = useState([]);\n  const [userArray, setUserArray] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [inputUserName, setInputUserName] = useState('');\n  const [inputUserDescription, setInputUserDescription] = useState('');\n  const [inputReplyUserId, setInputReplyUserId] = useState('');\n  const [inputReplyTextId, setInputReplyTextId] = useState('');\n\n  const getCommentArray = async () => {\n    const userData = await getFetchData('https://versatileapi.herokuapp.com/api/user/all/');\n    setUserArray(userData);\n\n    const _blockUserIds = localStorage.getItem('posns_block_user_ids');\n\n    const textAllURL =\n      'https://versatileapi.herokuapp.com/api/text/all/?$orderby=_created_at desc&$limit=5000' +\n      (\n        isNull(_blockUserIds) ? ''\n        : `&$filter=_user_id ne ` +\n          _blockUserIds.split(',')\n          .map(v=>`'${complementUserId(v, userData)}'`)\n          .join(' and _user_id ne ')\n      )\n\n    const likeData = await getFetchData('https://versatileapi.herokuapp.com/api/like/all/');\n    // console.log({likeData})\n\n    let _commentArray = [];\n    const commentData = await getFetchData(textAllURL)\n    // console.log({commentData})\n    for (const item of commentData) {\n      let likeCount = sum(likeData.filter(like => like.id === item.id).map(v => v.like_count))\n      _commentArray.push({\n        userName:\n        userData.find((user) => {\n            return user.id === item._user_id;\n          })?.name ?? \"\",\n        replyToUserName:\n          isUndefined(item.in_reply_to_user_id) ? '' :\n          userData.find((user) => {\n            return user.id === item.in_reply_to_user_id;\n          })?.name ?? \"-\",\n        replyToTextId:\n          isUndefined(item.in_reply_to_text_id) ? '' :\n          subFirst(item.in_reply_to_text_id, 8),\n        _replyToTextId: item.in_reply_to_text_id,\n        item: item,\n        userId: item._user_id,\n        createdAt: dateFormat(item._created_at),\n        updatedAt: dateFormat(item._updated_at),\n        commentId: item.id,\n        text: item.text,\n        likeCount,\n        childComment: [],\n      });\n    }\n\n    _commentArray.reverse();\n    return _commentArray;\n  }\n\n  const postText = async (text, replyUserId, replyTextId) => {\n    const postData = {\n      text\n    }\n    if (replyUserId !== '') {\n      postData.in_reply_to_user_id = replyUserId\n    }\n    if (replyTextId !== '') {\n      postData.in_reply_to_text_id = replyTextId\n    }\n    // console.log({postData})\n    const response = await fetch('https://versatileapi.herokuapp.com/api/text', {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"HelloWorld\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(postData)\n    });\n    return response.json();\n  }\n\n  const postUserName = async (name, description) => {\n    const response = await fetch('https://versatileapi.herokuapp.com/api/user/create_user', {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"HelloWorld\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({ name, description })\n    });\n\n    return response.json();\n  }\n\n  const reloadComment = () => {\n    (async () => {\n      setCommentArray(await getCommentArray());\n    })();\n  }\n\n  // ページロード時のデータ読み込み処理\n  useEffect(() => {\n    (async () => {\n      setCommentArray(await getCommentArray());\n\n      // // ブロックユーザーID指定\n      // localStorage.setItem('posns_block_user_ids', '2acaea0d5e,cce8bd6219');\n\n      const myUserItem = {\n        name: initialValue(localStorage.getItem('posns_username'), '', [null]),\n        description: initialValue(localStorage.getItem('posns_userdesc'), '', [null]),\n      }\n      // console.log({myUserItem})\n      setInputUserName(myUserItem.name);\n      setInputUserDescription(myUserItem.description)\n    })();\n  }, []);\n\n  const commentOutput = (comment) => {\n    return <>\n      {comment.createdAt === comment.updatedAt\n        ? `${comment.createdAt}`\n        : `${comment.createdAt}|${comment.updatedAt}`}\n      {`[${subFirst(comment.commentId, 8)}]`}\n      {`${comment.likeCount !== 0 ? ' Like:' + comment.likeCount : ''}`}\n      <br />\n      {`${comment.userName} [${subFirst(comment.userId, 10)}] `}\n      <br />\n      {\n        comment.replyToUserName === '' && comment.replyToTextId === '' ? null\n        : comment.replyToTextId === '' ? <>{`TO:${comment.replyToUserName}`}<br /></>\n        : comment.replyToUserName === '' ? <>{`REPLY:${comment.replyToTextId}`}<br /></>\n        : <>{`TO:${comment.replyToUserName} REPLY:${comment.replyToTextId}`}<br /></>\n      }\n      {/* {comment.text} */}\n\n      {comment.text.split(/(\\n)/).map((v, i) => v === '\\n' ? <br key={i} /> : v)}\n\n    </>\n  }\n\n  // ルートに表示されるものだけをフィルタしている\n  const viewCommentArray = commentArray.filter(comment => {\n    return (isUndefined(comment._replyToTextId)) ||\n      isUndefined(commentArray.find(c => c.commentId === comment._replyToTextId))\n  });\n\n  // // 多段階のスレッド表示階層\n  // for (const item1 of viewCommentArray) {\n  //   item1.childComment = commentArray.filter(c => c._replyToTextId === item1.commentId)\n  //   for (const item2 of item1.childComment) {\n  //     item2.childComment = commentArray.filter(c => c._replyToTextId === item2.commentId)\n  //     for (const item3 of item2.childComment) {\n  //       item3.childComment = commentArray.filter(c => c._replyToTextId === item3.commentId)\n  //       for (const item4 of item3.childComment) {\n  //         item4.childComment = commentArray.filter(c => c._replyToTextId === item4.commentId)\n  //         for (const item5 of item4.childComment) {\n  //           item5.childComment = commentArray.filter(c => c._replyToTextId === item5.commentId)\n  //         }\n  //       }\n  //     }\n  //   }\n  // }\n  // console.log({viewCommentArray})\n\n  const setChildComment = (targetCommentArray, level = 0) => {\n    for (const item of targetCommentArray) {\n      item.childComment = commentArray.filter(c => c._replyToTextId === item.commentId);\n      item.level = level;\n      if (1 <= item.childComment.length) {\n        setChildComment(item.childComment, level + 1);\n      }\n    }\n  }\n  setChildComment(viewCommentArray)\n\n  const outputChildComment = (targetCommentArray) => {\n    const result = (<>\n      {\n        targetCommentArray.map((comment, i) => {\n          return (\n            <div key={comment.commentId} style={{ marginLeft: `${comment.level * 15}px` }}>\n                {commentOutput(comment)}\n                <hr />\n                {1 <= comment.childComment.length ? outputChildComment( comment.childComment) : null}\n            </div>\n          )\n        })\n      }\n    </>)\n    return result;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      <div>\n        {outputChildComment(viewCommentArray)}\n\n        <div>\n          <input type=\"text\" value={inputUserName}\n            onChange={(e) => {\n              setInputUserName(e.target.value);\n            }}\n            placeholder='ユーザー名'\n          />\n          <input type=\"text\" value={inputUserDescription}\n            onChange={(e) => {\n              setInputUserDescription(e.target.value);\n            }}\n            placeholder='自己紹介文'\n          />\n          <button onClick={async () => {\n            await postUserName(inputUserName, inputUserDescription);\n            localStorage.setItem('posns_username', inputUserName);\n            localStorage.setItem('posns_userdesc', inputUserDescription);\n            reloadComment()\n          }}>ユーザー名設定</button>\n          <br />\n          <input type=\"text\" value={inputReplyUserId}\n            onChange={(e) => {\n              setInputReplyUserId(e.target.value);\n            }}\n            placeholder='返信ユーザーID'\n          />\n          <input type=\"text\" value={inputReplyTextId}\n            onChange={(e) => {\n              setInputReplyTextId(e.target.value);\n            }}\n            placeholder='返信テキストID'\n          />\n          <br />\n          <textarea value={inputText}\n            onChange={(e) => {\n              setInputText(e.target.value);\n            }}\n            placeholder='投稿内容'\n          />\n          <button onClick={async () => {\n            if (inputText !== '') {\n              const postTextResult = await postText(\n                inputText,\n                complementUserId(inputReplyUserId, userArray),\n                complementTextId(inputReplyTextId, commentArray)\n              );\n              // console.log({postTextResult})\n              setInputText('');\n              setInputReplyUserId('');\n              setInputReplyTextId('');\n              // console.log('postText', inputText)\n            }\n            // console.log('onClick before reloadComment', inputText)\n            reloadComment()\n          }}>書き込み/表示更新</button>\n          <br />\n        </div>\n\n        <br />\n\n      </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}