{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["parts","string","subFirst","isFirst","dateFormat","dateText","dateToString","stringToDate","getFetchData","url","a","fetch","then","response","json","data","result","App","useState","commentArray","setCommentArray","userArray","setUserArray","inputText","setInputText","inputUserName","setInputUserName","inputUserDescription","setInputUserDescription","inputReplyUserId","setInputReplyUserId","inputReplyTextId","setInputReplyTextId","getCommentArray","_userArray","userData","item","push","console","log","_commentArray","commentData","userName","find","user","id","_user_id","name","replyToUserName","isUndefined","in_reply_to_user_id","replyToTextId","in_reply_to_text_id","userId","createdAt","_created_at","updatedAt","_updated_at","commentId","text","reverse","postText","replyUserId","replyTextId","postData","method","mode","cache","credentials","headers","Authorization","redirect","referrerPolicy","body","JSON","stringify","postUserName","description","sleepByPromise","sec","Promise","resolve","setTimeout","getUserName","postUserNameFlag1","isSuccess","counter","postResult","myUserId","myUserItem","userItem","postUserNameFlag2","complementUserId","shortId","index","findIndex","complementTextId","comment","reloadComment","useEffect","localStorage","getItem","isNull","setItem","className","map","i","split","v","type","value","onChange","e","target","placeholder","onClick","postTextResult","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f1296d1.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport parts, { isUndefined, isNull, stringToDate, dateToString } from \"@standard-software/parts\"\nconst { subFirst, isFirst } = parts.string;\n\nconst dateFormat = (dateText) => {\n  return dateToString(\n    stringToDate(dateText, 'YYYY-MM-DDTHH:mm:ss.SSSZ'),\n    'MM/DD HH:mm:ss'\n  )\n}\n\nconst getFetchData = async (url) => {\n  let result;\n  await fetch(url)\n  .then((response) => response.json())\n  .then((data) => {\n    result = data\n  })\n  return result;\n}\n\nconst App = () => {\n\n  const [commentArray, setCommentArray] = useState([]);\n  const [userArray, setUserArray] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [inputUserName, setInputUserName] = useState('');\n  const [inputUserDescription, setInputUserDescription] = useState('');\n  const [inputReplyUserId, setInputReplyUserId] = useState('');\n  const [inputReplyTextId, setInputReplyTextId] = useState('');\n\n  // console.log(\"App\");\n\n  const getCommentArray = async () => {\n    const _userArray = [];\n    const userData = await getFetchData('https://versatileapi.herokuapp.com/api/user/all/');\n    for (const item of userData) {\n      _userArray.push({...item});\n    }\n    console.log({ _userArray });\n    setUserArray(_userArray);\n\n    const _commentArray = [];\n    const commentData = await getFetchData(\n      \"https://versatileapi.herokuapp.com/api/text/all/?$orderby=_created_at desc&$limit=1000\" +\n      \"&$filter=\" +\n      \"_user_id ne 'd9ecf9245defb6b07cb86fe92a6fde9e735fc9f9'\" +\n      // \" and \" +\n      // \"_user_id ne 'xxxx'\" +\n      \"\"\n    )\n    for (const item of commentData) {\n      _commentArray.push({\n        userName:\n          _userArray.find((user) => {\n            return user.id === item._user_id;\n          })?.name ?? \"\",\n        replyToUserName:\n          isUndefined(item.in_reply_to_user_id) ? '' :\n          _userArray.find((user) => {\n            return user.id === item.in_reply_to_user_id;\n          })?.name ?? \"-\",\n        replyToTextId:\n          isUndefined(item.in_reply_to_text_id) ? '' :\n          subFirst(item.in_reply_to_text_id, 8),\n        item: item,\n        userId: item._user_id,\n        createdAt: dateFormat(item._created_at),\n        updatedAt: dateFormat(item._updated_at),\n        commentId: item.id,\n        text: item.text,\n      });\n    }\n\n    console.log({ _commentArray });\n    _commentArray.reverse();\n    return _commentArray;\n  }\n\n  const postText = async (text, replyUserId, replyTextId) => {\n    const postData = {\n      text\n    }\n    if (replyUserId !== '') {\n      postData.in_reply_to_user_id = replyUserId\n    }\n    if (replyTextId !== '') {\n      postData.in_reply_to_text_id = replyTextId\n    }\n    console.log({postData})\n    const response = await fetch('https://versatileapi.herokuapp.com/api/text', {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"HelloWorld\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(postData)\n    });\n    return response.json();\n  }\n\n  const postUserName = async (name, description) => {\n    const response = await fetch('https://versatileapi.herokuapp.com/api/user/create_user', {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"HelloWorld\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({ name, description })\n    });\n\n    return response.json();\n  }\n\n  const sleepByPromise = (sec) => {\n    return new Promise(resolve => setTimeout(resolve, sec*1000));\n  }\n\n  const getUserName = async () => {\n    let userData;\n    try {\n      userData = await getFetchData('https://versatileapi.herokuapp.com/api/user/all/');\n    } catch {\n      console.log('getUserName userData catch', userData);\n      await sleepByPromise(5);\n      return await getUserName();\n    }\n    console.log('getUserName 1', userData);\n\n    let postResult;\n    let postUserNameFlag1 = { isSuccess: false, counter: 0 }\n    while (postUserNameFlag1.isSuccess === false) {\n      try {\n        postResult = await postUserName('test', 'test');\n        postUserNameFlag1.isSuccess = true\n      } catch {\n        await sleepByPromise(5);\n        postUserNameFlag1.counter += 1;\n      }\n      if (postUserNameFlag1.counter >= 5) {\n        return;\n      }\n      console.log('getUserName 2', postResult);\n    }\n    const myUserId = postResult.id\n    const myUserItem = userData.find(userItem => userItem.id === myUserId);\n\n    let postUserNameFlag2 = { isSuccess: false, counter: 0 }\n    while (postUserNameFlag2.isSuccess === false) {\n      try {\n        await postUserName(myUserItem.name, myUserItem.description)\n        postUserNameFlag2.isSuccess = true\n      }\n      catch {\n        await sleepByPromise(5);\n        postUserNameFlag2.counter += 1;\n      }\n      if (postUserNameFlag2.counter >= 5) {\n        postUserNameFlag2.isSuccess = true;\n      }\n      console.log('getUserName 3', {myUserItem})\n    }\n\n    return myUserItem;\n  }\n\n  const complementUserId = (shortId) => {\n    console.log('complementUserId', { userArray, shortId });\n    const index = userArray.findIndex(user => isFirst(user.id, shortId))\n    console.log({ userArray, shortId, index });\n    if (index === -1) {\n      return ''\n    } else {\n      return userArray[index].id\n    }\n  }\n\n  const complementTextId = (shortId) => {\n    console.log('complementTextId', { commentArray, shortId });\n    const index = commentArray.findIndex(comment => isFirst(comment.commentId, shortId))\n    console.log({ commentArray, shortId, index });\n    if (index === -1) {\n      return ''\n    } else {\n      return commentArray[index].commentId\n    }\n  }\n\n  const reloadComment = () => {\n    (async () => {\n      setCommentArray(await getCommentArray());\n    })();\n  }\n\n  // ページロード時のデータ読み込み処理\n  useEffect(() => {\n    (async () => {\n      setCommentArray(await getCommentArray());\n\n      let myUserItem = {\n        name: localStorage.getItem('posns_username'),\n        description: localStorage.getItem('posns_userdesc'),\n      }\n      if (isNull(myUserItem.name)) {\n        myUserItem = await getUserName();\n        if (isUndefined(myUserItem)) { return; }\n        localStorage.setItem('posns_username', myUserItem.name);\n        localStorage.setItem('posns_userdesc', myUserItem.description);\n      }\n      setInputUserName(myUserItem.name);\n      setInputUserDescription(myUserItem.description)\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      <div>\n        {commentArray.map((comment, i) => {\n          // console.log(comment.userName);\n          return (\n            <div key={comment.commentId}>\n              {comment.createdAt === comment.updatedAt\n                ? `${comment.createdAt}`\n                : `${comment.createdAt}|${comment.updatedAt}`}\n              {`[${subFirst(comment.commentId, 8)}]`}\n              <br />\n              {`${comment.userName} [${subFirst(comment.userId, 10)}] `}\n              <br />\n              {\n                comment.replyToUserName === '' && comment.replyToTextId === '' ? null\n                : comment.replyToTextId === '' ? <>{`TO:${comment.replyToUserName}`}<br /></>\n                : comment.replyToUserName === '' ? <>{`REPLY:${comment.replyToTextId}`}<br /></>\n                : <>{`TO:${comment.replyToUserName} REPLY:${comment.replyToTextId}`}<br /></>\n              }\n              {comment.text.split(/(\\n)/).map(v => v === '\\n' ? <br /> : v)}\n              <hr />\n            </div>\n          );\n        })}\n\n        <div>\n          <input type=\"text\" value={inputUserName}\n            onChange={(e) => {\n              setInputUserName(e.target.value);\n            }}\n            placeholder='ユーザー名'\n          />\n          <input type=\"text\" value={inputUserDescription}\n            onChange={(e) => {\n              setInputUserDescription(e.target.value);\n            }}\n            placeholder='自己紹介文'\n          />\n          <button onClick={async () => {\n            await postUserName(inputUserName, inputUserDescription);\n            localStorage.setItem('posns_username', inputUserName);\n            localStorage.setItem('posns_userdesc', inputUserDescription);\n            reloadComment()\n          }}>ユーザー名設定</button>\n          <br />\n          <input type=\"text\" value={inputReplyUserId}\n            onChange={(e) => {\n              setInputReplyUserId(e.target.value);\n            }}\n            placeholder='返信ユーザーID'\n          />\n          <input type=\"text\" value={inputReplyTextId}\n            onChange={(e) => {\n              setInputReplyTextId(e.target.value);\n            }}\n            placeholder='返信テキストID'\n          />\n          <br />\n          <textarea value={inputText}\n            onChange={(e) => {\n              setInputText(e.target.value);\n            }}\n            placeholder='投稿内容'\n          />\n          <button onClick={async () => {\n            if (inputText !== '') {\n              const postTextResult = await postText(\n                inputText, complementUserId(inputReplyUserId), complementTextId(inputReplyTextId)\n              );\n              console.log({postTextResult})\n              setInputText('');\n              setInputReplyUserId('');\n              setInputReplyTextId('');\n              console.log('postText', inputText)\n            }\n            console.log('onClick before reloadComment', inputText)\n            reloadComment()\n          }}>書き込み/表示更新</button>\n          <br />\n        </div>\n\n        <br />\n\n      </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n/**\n * なんかあとやれそうなこと\n * - ブロック用のユーザーIDをlocalStorageに登録してそこから指定を得るとユーザーごとにブロックをいれられる\n * - 返信用ユーザーUIを作れるかな\n * - スレッド表示対応\n * - スレッドへの返信機能\n * こんな実装予定\n */\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}